services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "8866:8000"
    # env_file:
    #   - .env
    environment:
      - TZ=Asia/Tokyo
      # - OLLAMA_HOST_URL=${OLLAMA_HOST_URL}
    healthcheck:
      test: curl -f http://localhost:8000/health/backend || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    depends_on:
      ollama:
        condition: service_healthy
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      minio:
        condition: service_healthy
    develop:
      watch:
        - action: sync
          path: .
          target: /app
          ignore:
            - .venv/
        - action: rebuild
          path: ./pyproject.toml

  ollama:
    image: ollama/ollama:0.6.2
    container_name: ollama
    environment:
      - TZ=Asia/Tokyo
    volumes:
      - type: bind
        source: .ollama
        target: /root/.ollama
    ports:
      - "11434:11434"
    restart: unless-stopped
    healthcheck:
      test: ollama list || exit 1
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  frontend:
    container_name: frontend
    build:
      context: frontend
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - TZ=Asia/Tokyo
    ports:
      - 8877:8877
    depends_on:
      backend:
        condition: service_healthy

  db:
    image: mongo:8.0.5
    container_name: mongo_db
    restart: always
    env_file:
      - .env
    environment:
      - TZ=Asia/Tokyo
      - MONGO_INITDB_ROOT_USERNAME=root
    ports:
      - 27017:27017
    volumes:
      - type: volume
        source: mongodb-data
        target: /data/db
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping').ok" --quiet
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s

  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      - TZ=Asia/Tokyo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_MONGODB_SERVER=db
    depends_on:
      - db

  rabbitmq:
    image: rabbitmq:4.0.2-management-alpine
    container_name: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
      - type: volume
        source: rabbitmq-data
        target: /var/lib/rabbitmq
      - type: bind
        source: rabbitmq-log
        target: /var/log/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - TZ=Asia/Tokyo
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - type: volume
        source: minio-data
        target: /data
    command: server /data --console-address ":9001"

volumes:
  ollama:
  mongodb-data:
  minio-data:
  rabbitmq-data:
