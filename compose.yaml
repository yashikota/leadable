services:
  backend:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      minio:
        condition: service_healthy
      mongo:
        condition: service_healthy
      ollama:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - TZ=Asia/Tokyo
      - SERVER_ADDRESS=${SERVER_ADDRESS}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
      - MONGO_INITDB_ROOT_PASSWORD=example
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
    ports:
      - '8866:8000'
    restart: always
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: curl -f http://localhost:8000/health/backend || exit 1
      timeout: 30s
    deploy:
      resources:
        reservations:
          devices:
            - capabilities:
                - gpu
              count: 1
              driver: nvidia
    develop:
      watch:
        - action: sync
          ignore:
            - .venv/
          path: .
          target: /app
        - action: rebuild
          path: ./pyproject.toml
  dozzle:
    image: amir20/dozzle:v8.11.9
    container_name: dozzle
    volumes:
      - source: /var/run/docker.sock
        target: /var/run/docker.sock
        type: bind
    ports:
      - '8780:8080'
  duckduckgo:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: duckduckgo
    environment:
      - TZ=Asia/Tokyo
    command: python /app/src/service/duckduckgo.py
    restart: always
  frontend:
    build:
      args:
        VITE_SERVER_ADDRESS: ${SERVER_ADDRESS}
      context: frontend
      dockerfile: Dockerfile
    container_name: frontend
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - TZ=Asia/Tokyo
      - VITE_SERVER_ADDRESS=${SERVER_ADDRESS}
    ports:
      - '8877:8877'
    restart: always
  minio:
    image: quay.io/minio/minio:RELEASE.2024-10-13T13-34-11Z
    container_name: minio
    volumes:
      - source: minio-data
        target: /data
        type: volume
    environment:
      - TZ=Asia/Tokyo
      - MINIO_ROOT_USER=root
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    ports:
      - '9000:9000'
      - '9001:9001'
    command: server /data --console-address ":9001"
    healthcheck:
      interval: 5s
      retries: 5
      test: mc ready local
      timeout: 5s
  mongo:
    image: mongo:8.0.5
    container_name: mongo
    volumes:
      - source: mongodb-data
        target: /data/db
        type: volume
      - source: configdb-data
        target: /data/configdb
        type: volume
    environment:
      - TZ=Asia/Tokyo
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
    restart: always
    healthcheck:
      interval: 30s
      retries: 5
      start_period: 60s
      test: mongosh --eval "db.adminCommand('ping').ok" --quiet
      timeout: 30s
  mongo-express:
    image: mongo-express:1.0.2
    container_name: mongo-express
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      - TZ=Asia/Tokyo
      - ME_CONFIG_MONGODB_ADMINUSERNAME=root
      - ME_CONFIG_MONGODB_ADMINPASSWORD=example
      - ME_CONFIG_MONGODB_URL=mongodb://root:example@mongo:27017/
      - ME_CONFIG_BASICAUTH=false
    ports:
      - '8781:8081'
    restart: always
  ollama:
    image: ollama/ollama:0.6.2
    container_name: ollama
    volumes:
      - source: .ollama
        target: /root/.ollama
        type: bind
    environment:
      - TZ=Asia/Tokyo
    restart: always
    healthcheck:
      interval: 10s
      retries: 5
      start_period: 10s
      test: ollama list || exit 1
      timeout: 30s
    deploy:
      resources:
        reservations:
          devices:
            - capabilities:
                - gpu
              count: 1
              driver: nvidia
  ollama-model-manager:
    image: ghcr.io/d3v0ps-cloud/ollamamodelmanager:sha-a9d312d
    container_name: ollama-model-manager
    depends_on:
      - ollama
    environment:
      - OLLAMA_ENDPOINTS=http://ollama:11434
    ports:
      - '8788:3000'
    restart: always
  open-webui:
    image: ghcr.io/open-webui/open-webui:0.5.20
    container_name: open-webui
    depends_on:
      - ollama
    volumes:
      - source: .open-webui
        target: /app/backend/data
        type: bind
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_AUTH=false
    ports:
      - '8778:8080'
    restart: always
  qdrant:
    image: qdrant/qdrant:v1.13.5
    container_name: qdrant
    volumes:
      - source: qdrant-data
        target: /qdrant/storage
        type: volume
    environment:
      - TZ=Asia/Tokyo
    ports:
      - '6333:6333'
    restart: always
    healthcheck:
      interval: 5s
      retries: 3
      test: bash -c ':> /dev/tcp/127.0.0.1/6333' || exit 1
      timeout: 5s
  qdrant-mcp:
    build:
      context: backend/src/mcp
      dockerfile: qdrant.Dockerfile
    container_name: qdrant-mcp
    environment:
      - TZ=Asia/Tokyo
    restart: always
  rabbitmq:
    image: rabbitmq:4.0.7-management-alpine
    container_name: rabbitmq
    volumes:
      - source: rabbitmq-data
        target: /var/lib/rabbitmq
        type: volume
      - source: .rabbitmq-log
        target: /var/log/rabbitmq
        type: bind
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    ports:
      - '15672:15672'
    restart: always
    healthcheck:
      interval: 30s
      retries: 3
      test: rabbitmqctl status
      timeout: 30s
  worker:
    build:
      context: backend
      dockerfile: Dockerfile
    container_name: worker
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - PYTHONPATH=./src
      - TZ=Asia/Tokyo
      - SERVER_ADDRESS=${SERVER_ADDRESS}
      - MINIO_SECRET_KEY=${MINIO_PASSWORD}
      - MONGO_INITDB_ROOT_PASSWORD=example
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
    command: python /app/src/service/worker.py
    working_dir: /app
    restart: always
volumes:
  configdb-data:
  minio-data:
  mongodb-data:
  ollama:
  open-webui:
  qdrant-data:
  rabbitmq-data:
